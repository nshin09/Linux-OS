Checkpoint 1:

IDT getting “no such instruction: extern void idt_initializer()” error
    Solution: Including the idt.h file where that function existed in the Boot.S file (before the program had booted) meant that things
    loaded out of order and Boot.S checked if the function existed before idt.c had actually created the function. Initializing idt in
    kernel.c and removing “include idt.h” from Boot.S solved this issue.

Program boot loops whenever interrupts are enabled and we run our divide by zero test.
	Solution: The interrupt table had been set up incorrectly. Our Reserved values hadn’t been set correctly so the interrupts weren’t 
    being interpreted as interrupts.

Exception print function is printing the wrong code for the divide by zero error
    Solution: When we do “pushl $0” it’s not actually pushing zero, so the print exception function is instead taking the saved flags 
    value as the error. To solve this we made individual functions to handle each interrupt/exception instead of having 1 general 
    interrupt handler that takes the interrupt code as an argument.

Program accepts one keyboard interrupt but then freezes, not accepting any more keyboard inputs
	Solution: We had also started work on the RTC. Our RTC code didn’t have the registers set up correctly, so when we set those up 
    that solved the Keyboard interrupt issue. Additionally, we hadn’t been sending out an EOI signal to the pic at first.

RTC Interrupts don’t occur
	Solution: We hadn’t set up all of the registers properly. Registers A and B had been set up but we had read some incorrect 
    documentation and incorrectly determined we didn’t need to set up register C. Getting register C set up correctly allowed RTC 
    interrupts to occur.


Checkpoint 2:

Keyboard printing characters after enter.
    Solution: We had an issue with how we were handling/printing our keyboard buffer. Because the buffer receives a newline character
    when the enter key is pressed, and because we were printing as many characters as had been typed, things weren't lining up. The
    buffer we had created to use with read and write only receiving data upto when enter was pressed but was outputting as many
    characters as had been typed, meaning that the old data of the temp buffer was also being printed whenever we were running our test.

After the screen is cleared, typing no longer works.
    Solution: When we were clearing the screen from Ctrl+L we exited our keyboard handler function early. This caused the 
    send EOI signal to not occur, meaning that any future keyboard interrupts weren't being received. By adding send_eoi before 
    returning after clearing the screen, we were able to type after clearing the screen. 

Clear screen caused the cursor to appear at the bottom of the screen.
    Solution: Because of the code we added to make the cursor follow where the user is typing, the cursor started to appear at incorrect
    places whenever the screen was cleared. To fix this, we made the clear function also reset the cursor's position to (0,0).

Read file outputting random junk data.
    Solution: The way that we were accessing file information was incorrect. We had been using the offset into a file as the address
    of that file when creating a pointer to read file data. This meant that what we were actually reading information from other 
    memory addresses that hadn't been filled with anything, causing the system to output junk data.

RTC read function gets stuck and causes RTC not to work.
    Solution: We were disabling interrupts at the start of this function. Since RTC_read waits for an RTC interrupt to occur,
    disabling interrupts at the start of this function caused the program to get stuck with no way to exit. By removing the line
    that disable interrupts, RTC functionality started working.


Checkpoint 3:

In Execute, arguments passed to read_dentry_by_name sometimes get messed up. The string has extra characters that appear once inside
of the read_dentry_by_name function that aren't present in the argument before it's called.
    Solution: This bug usually happened when the command was just the one argument, and we figured that our test command didn't have 
    a '\0' at the end.. We solved this issue by adding a null character at the end of the command. We recognized that because terminal
    adds a '\n' character when enter is pressed, we could replace that with a '\0' character without much issue. This solved the
    problem and we no longer got the weird, extraneous characters.

Syscall_handler was saving registers incorrectly and they were being reset to incorrect values
    Solution: The pushl and popl commands, when used on certain registers (namely %edi and %esi) weren't accurately copying
    the contents of the register. To fix this, we instead saved some registers to a location in memory instead of saving them 
    to the stack.

Halt page faults whenever you try to return to the starting context
    Solution: Because of how we were saving our registers due to the above error, our %ebp register was never being pushed. 
    We had originally thought that %ebp was also being copied incorrectly using push/pop, but this meant that %ebp wasn't on our 
    stack when we tried to do the context switch for halt, leading to a page fault error due to having an invalid ebp.


Shell says that all commands don't exist
    Solution: We were reseting our keyboard buffer index in our keyboard handler when enter was pressed. This meant that when
    terminal_read was then called, since it copies from the start to keyboard buffer index, it was copying 0 characters. We fixed
    this by creating a second variable (KBI_for_read) that is set to keyboard_buffer_index reight before that variable gets set 
    to 0. KBI_for_read is then used to check how much to copy in the terminal read function.

After testprint is run, shell giving 'no command found' for all commands (valid and invalid)
    Solution: We had been clearing our buffer incorrectly. In our terminal_read function, we looped through the buffer
    as had been written and set it to the '\0' character. The issue with out implementation was that we were using strlen(buf) to
    determine how many characters to set. When we looked further into it, strlen was only returning one or two characters when the 
    buffer was actually significantly longer, meaning our terminal_read was receiving the ending of the previous command if it was
    larger than the current command, and testprint is the longest command, which is why it was most noticeable.


Checkpoint 4:

When testing cat frame0.txt we were repeatedly printing the text file without spamming
    Solution: In our file_read function we add the line PCB->FDT[fd].file_position = ret, which sets the file position to the 
    number of bytes we read in our read_data function. We then added a check in read_data checking if the file_position = file length
    and if it is return 0. This stops the repeated read because we return 0 from file_read

Fish only printed the top left character and the I/M character that gets added in
    Solution: In our read_data function for reading files, we were always returning 0 if the file's data took up less than one data block.
    This meant that when fish was reading data, it was seeing the return value and thinking the entire file had been read, resulting in the
    programming only reading one character from the file. Changing this to be the length of the file fixed this error.

Grep prints "391OS>" twice after running 
    Solution: In our read_terminal function, we wait for a gotNewLine signal, which can be set by other functions. Somewhere in 
    grep, one of these other functions was setting gotNewLine to high, meaning it wouldn't wait for another input before trying to 
    execute it. To solve this, we added a line to the start of read_terminal setting gotNewLine to high. This way it will only 
    try to run an input that was passed while it's running, and not recognize things that were passed before it started running.

Checkpoint 5:
